// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package railway

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-railway/sdk/go/railway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Project struct {
	pulumi.CustomResourceState

	ApiToken               pulumi.StringOutput    `pulumi:"apiToken"`
	DefaultEnvironmentName pulumi.StringPtrOutput `pulumi:"defaultEnvironmentName"`
	Description            pulumi.StringPtrOutput `pulumi:"description"`
	IsPublic               pulumi.BoolPtrOutput   `pulumi:"isPublic"`
	PrDeploys              pulumi.BoolPtrOutput   `pulumi:"prDeploys"`
	ProjectId              pulumi.StringOutput    `pulumi:"projectId"`
	Result                 pulumi.StringOutput    `pulumi:"result"`
	Runtime                pulumi.StringPtrOutput `pulumi:"runtime"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiToken == nil {
		return nil, errors.New("invalid value for required argument 'ApiToken'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("railway:index:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("railway:index:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
}

type ProjectState struct {
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	ApiToken               string  `pulumi:"apiToken"`
	DefaultEnvironmentName *string `pulumi:"defaultEnvironmentName"`
	Description            *string `pulumi:"description"`
	IsPublic               *bool   `pulumi:"isPublic"`
	PrDeploys              *bool   `pulumi:"prDeploys"`
	Runtime                *string `pulumi:"runtime"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	ApiToken               pulumi.StringInput
	DefaultEnvironmentName pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	IsPublic               pulumi.BoolPtrInput
	PrDeploys              pulumi.BoolPtrInput
	Runtime                pulumi.StringPtrInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

func (o ProjectOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ApiToken }).(pulumi.StringOutput)
}

func (o ProjectOutput) DefaultEnvironmentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.DefaultEnvironmentName }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProjectOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

func (o ProjectOutput) PrDeploys() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.BoolPtrOutput { return v.PrDeploys }).(pulumi.BoolPtrOutput)
}

func (o ProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o ProjectOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func (o ProjectOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Project) pulumi.StringPtrOutput { return v.Runtime }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterOutputType(ProjectOutput{})
}
