// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package railway

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-railway/sdk/go/railway/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Service struct {
	pulumi.CustomResourceState

	ApiToken      pulumi.StringOutput    `pulumi:"apiToken"`
	EnvironmentId pulumi.StringOutput    `pulumi:"environmentId"`
	Icon          pulumi.StringPtrOutput `pulumi:"icon"`
	ProjectId     pulumi.StringOutput    `pulumi:"projectId"`
	Result        pulumi.StringOutput    `pulumi:"result"`
	ServiceId     pulumi.StringOutput    `pulumi:"serviceId"`
	Source        ServiceSourcePtrOutput `pulumi:"source"`
	Variables     pulumi.StringMapOutput `pulumi:"variables"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiToken == nil {
		return nil, errors.New("invalid value for required argument 'ApiToken'")
	}
	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("railway:index:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("railway:index:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
}

type ServiceState struct {
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	ApiToken      string            `pulumi:"apiToken"`
	EnvironmentId string            `pulumi:"environmentId"`
	Icon          *string           `pulumi:"icon"`
	ProjectId     string            `pulumi:"projectId"`
	Source        *ServiceSource    `pulumi:"source"`
	Variables     map[string]string `pulumi:"variables"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	ApiToken      pulumi.StringInput
	EnvironmentId pulumi.StringInput
	Icon          pulumi.StringPtrInput
	ProjectId     pulumi.StringInput
	Source        ServiceSourcePtrInput
	Variables     pulumi.StringMapInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func (o ServiceOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ApiToken }).(pulumi.StringOutput)
}

func (o ServiceOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

func (o ServiceOutput) Icon() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.Icon }).(pulumi.StringPtrOutput)
}

func (o ServiceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o ServiceOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func (o ServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

func (o ServiceOutput) Source() ServiceSourcePtrOutput {
	return o.ApplyT(func(v *Service) ServiceSourcePtrOutput { return v.Source }).(ServiceSourcePtrOutput)
}

func (o ServiceOutput) Variables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Variables }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterOutputType(ServiceOutput{})
}
